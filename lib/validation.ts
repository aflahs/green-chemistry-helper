// A basic list of common chemical elements
const CHEMICAL_ELEMENTS = [
  "H",
  "He",
  "Li",
  "Be",
  "B",
  "C",
  "N",
  "O",
  "F",
  "Ne",
  "Na",
  "Mg",
  "Al",
  "Si",
  "P",
  "S",
  "Cl",
  "Ar",
  "K",
  "Ca",
  "Sc",
  "Ti",
  "V",
  "Cr",
  "Mn",
  "Fe",
  "Co",
  "Ni",
  "Cu",
  "Zn",
  "Ga",
  "Ge",
  "As",
  "Se",
  "Br",
  "Kr",
  "Rb",
  "Sr",
  "Y",
  "Zr",
  "Nb",
  "Mo",
  "Tc",
  "Ru",
  "Rh",
  "Pd",
  "Ag",
  "Cd",
  "In",
  "Sn",
  "Sb",
  "Te",
  "I",
  "Xe",
  "Cs",
  "Ba",
  "La",
  "Ce",
  "Pr",
  "Nd",
  "Pm",
  "Sm",
  "Eu",
  "Gd",
  "Tb",
  "Dy",
  "Ho",
  "Er",
  "Tm",
  "Yb",
  "Lu",
  "Hf",
  "Ta",
  "W",
  "Re",
  "Os",
  "Ir",
  "Pt",
  "Au",
  "Hg",
  "Tl",
  "Pb",
  "Bi",
  "Po",
  "At",
  "Rn",
  "Fr",
  "Ra",
  "Ac",
  "Th",
  "Pa",
  "U",
  "Np",
  "Pu",
  "Am",
  "Cm",
  "Bk",
  "Cf",
  "Es",
  "Fm",
]

// A list of common chemical compounds and functional groups
const COMMON_COMPOUNDS = [
  "water",
  "benzene",
  "toluene",
  "methane",
  "ethane",
  "propane",
  "butane",
  "methanol",
  "ethanol",
  "propanol",
  "acetone",
  "acetic acid",
  "formic acid",
  "benzaldehyde",
  "acetaldehyde",
  "formaldehyde",
  "phenol",
  "aniline",
  "pyridine",
  "chloroform",
  "dichloromethane",
  "carbon tetrachloride",
  "hexane",
  "heptane",
  "octane",
  "nonane",
  "decane",
  "ethylene",
  "propylene",
  "acetylene",
  "benzyl",
  "phenyl",
  "methyl",
  "ethyl",
  "propyl",
  "butyl",
  "pentyl",
  "hexyl",
  "hydroxyl",
  "amino",
  "carboxyl",
  "carbonyl",
  "aldehyde",
  "ketone",
  "ester",
  "ether",
  "amide",
  "nitro",
  "sulfate",
  "phosphate",
  "chloride",
  "bromide",
  "iodide",
  "fluoride",
  "oxide",
  "peroxide",
  "hydroxide",
  "acid",
  "base",
  "salt",
  "alcohol",
  "alkane",
  "alkene",
  "alkyne",
  "aromatic",
  "aliphatic",
  "cyclic",
  "heterocyclic",
  "polymer",
  "monomer",
  "dimer",
  "trimer",
  "tetramer",
  "pentamer",
  "hexamer",
  "heptamer",
  "octamer",
  "nonamer",
  "decamer",
  "glycerol",
  "glucose",
  "fructose",
  "sucrose",
  "lactose",
  "maltose",
  "starch",
  "cellulose",
  "protein",
  "amino acid",
  "lipid",
  "fatty acid",
  "nucleic acid",
  "DNA",
  "RNA",
  "ATP",
  "ADP",
  "AMP",
  "GTP",
  "GDP",
  "GMP",
  "CTP",
  "CDP",
  "CMP",
  "UTP",
  "UDP",
  "UMP",
  "NAD",
  "NADH",
  "NADP",
  "NADPH",
  "FAD",
  "FADH2",
  "CoA",
  "acetyl-CoA",
  "citrate",
  "isocitrate",
  "alpha-ketoglutarate",
  "succinate",
  "fumarate",
  "malate",
  "oxaloacetate",
  "pyruvate",
  "lactate",
  "alanine",
  "arginine",
  "asparagine",
  "aspartic acid",
  "cysteine",
  "glutamic acid",
  "glutamine",
  "glycine",
  "histidine",
  "isoleucine",
  "leucine",
  "lysine",
  "methionine",
  "phenylalanine",
  "proline",
  "serine",
  "threonine",
  "tryptophan",
  "tyrosine",
  "valine",
  "adenine",
  "guanine",
  "cytosine",
  "thymine",
  "uracil",
  "ribose",
  "deoxyribose",
  "phosphate",
  "sulfate",
  "nitrate",
  "carbonate",
  "bicarbonate",
  "ammonium",
  "hydronium",
  "hydroxide",
  "chlorate",
  "perchlorate",
  "permanganate",
  "dichromate",
  "chromate",
  "sulfite",
  "bisulfite",
  "thiosulfate",
  "sulfide",
  "hydrogen sulfide",
  "hydrogen peroxide",
  "ozone",
  "carbon monoxide",
  "carbon dioxide",
  "nitrogen dioxide",
  "nitric oxide",
  "nitrous oxide",
  "sulfur dioxide",
  "sulfur trioxide",
  "ammonia",
  "hydrazine",
  "hydroxylamine",
  "hydrogen cyanide",
  "cyanide",
  "thiocyanate",
  "isocyanate",
  "isothiocyanate",
  "azide",
  "nitrite",
  "nitride",
  "phosphine",
  "phosphite",
  "phosphonate",
  "phosphinate",
  "silane",
  "silanol",
  "siloxane",
  "silicate",
  "borane",
  "borate",
  "boronate",
  "borinate",
  "borohydride",
  "hydride",
  "deuteride",
  "tritide",
  "lithium hydride",
  "sodium hydride",
  "potassium hydride",
  "calcium hydride",
  "lithium aluminum hydride",
  "sodium borohydride",
  "potassium borohydride",
  "calcium borohydride",
  "sodium cyanoborohydride",
  "lithium tri-tert-butoxyaluminum hydride",
  "diisobutylaluminum hydride",
  "lithium triethylborohydride",
  "sodium triacetoxyborohydride",
  "triethylsilane",
  "triisopropylsilane",
  "triphenylsilane",
  "trimethylsilane",
  "dimethylsilane",
  "methylsilane",
  "silane",
  "disilane",
  "trisilane",
  "tetrasilane",
  "pentasilane",
  "hexasilane",
  "heptasilane",
  "octasilane",
  "nonasilane",
  "decasilane",
  "diborane",
  "tetraborane",
  "pentaborane",
  "hexaborane",
  "heptaborane",
  "octaborane",
  "nonaborane",
  "decaborane",
  "carborane",
  "borazine",
  "borazole",
  "borazine",
  "borazole",
  "borazine",
  "borazole",
  "borazine",
  "borazole",
]

/**
 * Validates if the input contains valid chemical compounds or elements
 * @param input The input string to validate
 * @returns An object with validation result and message
 */
export function validateChemicalInput(input: string): { isValid: boolean; message: string } {
  if (!input || input.trim() === "") {
    return { isValid: false, message: "Input cannot be empty" }
  }

  // Split the input by common separators and clean up
  const compounds = input
    .split(/[+,;\s]+/)
    .map((c) => c.trim())
    .filter((c) => c.length > 0)

  if (compounds.length === 0) {
    return { isValid: false, message: "No valid compounds found" }
  }

  // Check each compound against our lists
  const invalidCompounds = compounds.filter((compound) => {
    // Convert to lowercase for case-insensitive matching with common compounds
    const lowerCompound = compound.toLowerCase()

    // Check if it's in our list of common compounds
    if (COMMON_COMPOUNDS.some((c) => lowerCompound.includes(c))) {
      return false // Valid
    }

    // Check if it contains chemical elements
    // This is a simple check that might have false positives
    if (
      CHEMICAL_ELEMENTS.some(
        (element) =>
          compound.includes(element) &&
          // Make sure we're matching whole elements, not just parts of words
          (compound === element ||
            compound.includes(element + " ") ||
            compound.includes(" " + element) ||
            compound.includes(element + "-") ||
            compound.includes("-" + element) ||
            /[0-9]/.test(compound)), // Contains numbers, likely a chemical formula
      )
    ) {
      return false // Valid
    }

    return true // Invalid
  })

  if (invalidCompounds.length > 0) {
    return {
      isValid: false,
      message: `The following don't appear to be valid chemical compounds: ${invalidCompounds.join(", ")}`,
    }
  }

  return { isValid: true, message: "Valid chemical input" }
}
